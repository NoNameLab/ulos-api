version: "3.8"

services:
  db:
    image: postgres:15
    container_name: ulos_db
    env_file: .env
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5433:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      # Mount the SQL script to be executed on init
      - ./app/db/init:/docker-entrypoint-initdb.d
    # It's good practice to ensure the init scripts are readable by the postgres user
    # If you encounter permission issues, you might need to adjust file permissions
    # or build a custom Dockerfile for postgres that copies and sets permissions.

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ulos_api
    env_file: .env
    environment:
      # Apunta la API al servicio "db" dentro de la red de Docker
      DATABASE_HOST: db
      # Ensure your API waits for the DB to be ready and schemas to be generated by Tortoise
      # The generate_schemas=True flag in your app/main.py will handle schema creation
      # The seed.sql will handle initial data population.
    ports:
      - "8000:8000"
    depends_on:
      - db
    volumes:
      - .:/app

volumes:
  db_data:
